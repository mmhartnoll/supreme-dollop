using MindSculptor.DataAccess.Modelled.Records;
using MindSculptor.Tools.Applications.DataContextGenerator.Extensions;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.RecordFiles.Constructors;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.RecordFiles.Methods;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.RecordFiles.Properties;
using MindSculptor.Tools.CodeGeneration;
using MindSculptor.Tools.CodeGeneration.Declarations;
using System.IO;

namespace MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.RecordFiles
{
    internal class RecordClassFile : GeneratedCodeFile
    {
        private RecordClassFile(RecordDefinition recordDefinition, string rootFolderPath, string rootNamespace)
            : base(Path.Combine(rootFolderPath, "Schemas", recordDefinition.Schema.Name, "Tables", "Records"), $"{recordDefinition.RecordName}.AutoGenerated.cs")
        {
            AddUsingDirective("MindSculptor.DataAccess.Context");
            AddUsingDirective("MindSculptor.DataAccess.Context.Events");
            AddUsingDirective("MindSculptor.Tools.Extensions");
            AddUsingDirective("System");
            AddUsingDirective("System.Data.Common");
            AddUsingDirective("System.Threading");
            AddUsingDirective("System.Threading.Tasks");

            AddNamespace(RecordsNamespaceDeclaration.Create(recordDefinition, rootNamespace));
        }

        public static RecordClassFile Create(RecordDefinition recordDefinition, string rootFolderPath, string rootNamespace)
            => new RecordClassFile(recordDefinition, rootFolderPath, rootNamespace);

        private class RecordsNamespaceDeclaration : NamespaceDeclaration
        {
            private RecordsNamespaceDeclaration(RecordDefinition recordDefinition, string rootNamespace)
                    : base($"{rootNamespace}.Schemas.{recordDefinition.Schema.Name}.Tables.Records")
                => AddClass(RecordClassDeclaration.Create(recordDefinition));

            public static RecordsNamespaceDeclaration Create(RecordDefinition recordDefinition, string rootNamespace)
                => new RecordsNamespaceDeclaration(recordDefinition, rootNamespace);

            private class RecordClassDeclaration : ClassDeclaration
            {
                private RecordClassDeclaration(RecordDefinition recordDefinition)
                    : base(recordDefinition.RecordName, $"DatabaseRecord<{recordDefinition.RecordName}>", MemberAccessModifiers.Public)
                {
                    foreach (var fieldDefinition in recordDefinition.Fields)
                        if (!fieldDefinition.IsReadOnly)
                            AddField(FieldDeclaration.Create(TypeDeclaration.Create(fieldDefinition.MappedDalType, fieldDefinition.IsNullable), fieldDefinition.Name.FormatAsVariableName("_"), MemberAccessModifiers.Private));

                    foreach (var fieldDefinition in recordDefinition.Fields)
                        AddProperty(FieldPropertyDeclaration.Create(fieldDefinition));

                    AddConstructor(RecordConstructorDeclaration.Create(recordDefinition));
                    AddMethod(CreateRecordMethodDeclaration.Create(recordDefinition));

                    AddMethod(UpdateRecordMethodDeclaration.Create(recordDefinition));
                    AddMethod(UpdateRecordAsyncMethodDeclaration.Create(recordDefinition));

                    AddMethod(DeleteRecordMethodDeclaration.Create(recordDefinition));
                    AddMethod(DeleteRecordAsyncMethodDeclaration.Create(recordDefinition));
                }

                public static RecordClassDeclaration Create(RecordDefinition recordDefinition)
                    => new RecordClassDeclaration(recordDefinition);
            }
        }
    }
}
