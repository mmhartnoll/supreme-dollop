using MindSculptor.DataAccess.Context.Query.Expressions;
using MindSculptor.DataAccess.Modelled.Records;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.ExpressionFiles.Constructors;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.ExpressionFiles.Methods;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.ExpressionFiles.Properties;
using MindSculptor.Tools.CodeGeneration;
using MindSculptor.Tools.CodeGeneration.Declarations;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.ExpressionFiles
{
    internal class ExpressionClassFile : GeneratedCodeFile
    {
        private ExpressionClassFile(RecordDefinition recordDefinition, string rootFolderPath, string rootNamespace) 
            : base(Path.Combine(rootFolderPath, "Schemas", recordDefinition.Schema.Name, "Tables", "Records", "Expressions"), $"{recordDefinition.RecordName}Expression.AutoGenerated.cs")
        {
            var referencedSchemaNames = new HashSet<string>();
            foreach (var foreignKeyDefinition in recordDefinition.ForeignKeys)
            {
                if (recordDefinition.Schema == foreignKeyDefinition.ReferencedKey.RecordDefinition.Schema)
                    continue;

                var schemaName = foreignKeyDefinition.ReferencedKey.RecordDefinition.Schema.Name;
                if (!referencedSchemaNames.Contains(schemaName))
                    referencedSchemaNames.Add(schemaName);
            }

            foreach (var schemaName in referencedSchemaNames)
                AddUsingDirective($"MindSculptor.App.AppDataContext.Schemas.{schemaName}.Tables.Records");

            AddUsingDirective("MindSculptor.DataAccess.Context.Query.Expressions");
            AddUsingDirective("MindSculptor.DataAccess.Context.Query.Expressions.Fields");

            if (recordDefinition.ForeignKeys.Any())
            {
                AddUsingDirective("MindSculptor.DataAccess.Context.Query.Expressions.Logical");
                AddUsingDirective("MindSculptor.DataAccess.Context.Query.Expressions.Relational");
            }

            AddNamespace(ExpressionsNamespaceDeclaration.Create(recordDefinition, rootNamespace));
        }

        public static ExpressionClassFile Create(RecordDefinition recordDefinition, string rootFolderPath, string rootNamespace)
            => new ExpressionClassFile(recordDefinition, rootFolderPath, rootNamespace);

        private class ExpressionsNamespaceDeclaration : NamespaceDeclaration
        {
            private ExpressionsNamespaceDeclaration(RecordDefinition recordDefinition, string rootNamespace)
                    : base($"{rootNamespace}.Schemas.{recordDefinition.Schema.Name}.Tables.Records.Expressions")
                => AddClass(ExpressionClassDeclaration.Create(recordDefinition));

            public static ExpressionsNamespaceDeclaration Create(RecordDefinition recordDefinition, string rootNamespace)
                => new ExpressionsNamespaceDeclaration(recordDefinition, rootNamespace);

            private class ExpressionClassDeclaration : ClassDeclaration
            {
                private ExpressionClassDeclaration(RecordDefinition recordDefinition) 
                    : base($"{recordDefinition.RecordName}Expression", typeof(DatabaseRecordExpression), MemberAccessModifiers.Public)
                {
                    foreach (var fieldDefinition in recordDefinition.Fields)
                        AddProperty(FieldPropertyDeclaration.Create(fieldDefinition));
                    foreach (var foreignKeyDefinition in recordDefinition.ForeignKeys)
                        AddProperty(ParentRecordPropertyDeclaration.Create(foreignKeyDefinition));

                    AddConstructor(ExpressionConstructorDeclaration.Create(recordDefinition));

                    foreach (var foreignKeyDefinition in recordDefinition.ForeignKeys)
                        AddMethod(GetParentRecordExpressionMethodDeclaration.Create(foreignKeyDefinition));
                }

                public static ExpressionClassDeclaration Create(RecordDefinition recordDefinition)
                    => new ExpressionClassDeclaration(recordDefinition);
            }
        }
    }
}
