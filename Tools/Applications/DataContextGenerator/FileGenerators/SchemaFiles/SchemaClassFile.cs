using MindSculptor.DataAccess.Modelled.Schemas;
using MindSculptor.Tools.Applications.DataContextGenerator.Extensions;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.SchemaFiles.Constructors;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.SchemaFiles.Methods;
using MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.SchemaFiles.Properties;
using MindSculptor.Tools.CodeGeneration;
using MindSculptor.Tools.CodeGeneration.Declarations;
using System.IO;

namespace MindSculptor.Tools.Applications.DataContextGenerator.FileGenerators.SchemaFiles
{
    internal class SchemaClassFile : GeneratedCodeFile
    {
        private SchemaClassFile(Schema schemaDefinition, string rootFolderPath, string rootNamespace)
            : base(Path.Combine(rootFolderPath, "Schemas"), $"{schemaDefinition.Name}Schema.AutoGenerated.cs")
        {
            AddUsingDirective("MindSculptor.DataAccess.Context");
            AddUsingDirective($"MindSculptor.App.AppDataContext.Schemas.{schemaDefinition.Name}.Tables");
            AddUsingDirective("System");

            AddNamespace(SchemasNamespaceDeclaration.Create(schemaDefinition, rootNamespace));
        }

        public static SchemaClassFile Create(Schema schemaDefinition, string rootFolderPath, string rootNamespace)
            => new SchemaClassFile(schemaDefinition, rootFolderPath, rootNamespace);

        private class SchemasNamespaceDeclaration : NamespaceDeclaration
        {
            private SchemasNamespaceDeclaration(Schema schemaDefinition, string rootNamespace)
                    : base($"{rootNamespace}.Schemas")
                => AddClass(SchemaClassDeclaration.Create(schemaDefinition));

            public static SchemasNamespaceDeclaration Create(Schema schemaDefinition, string rootNamespace)
                => new SchemasNamespaceDeclaration(schemaDefinition, rootNamespace);

            private class SchemaClassDeclaration : ClassDeclaration
            {
                private SchemaClassDeclaration(Schema schemaDefinition)
                    : base($"{schemaDefinition.Name}Schema", "DataContextSchema", MemberAccessModifiers.Public)
                {
                    foreach (var recordDefinition in schemaDefinition.Records)
                        AddField(FieldDeclaration.Create(
                            $"Lazy<{recordDefinition.TableName}Table>",
                            $"{recordDefinition.TableName}TableLoader".FormatAsVariableName(),
                            MemberAccessModifiers.Private));

                    foreach (var recordDefinition in schemaDefinition.Records)
                        AddProperty(TablePropertyDeclaration.Create(recordDefinition));

                    AddConstructor(SchemaConstructorDeclaration.Create(schemaDefinition));
                    AddMethod(CreateSchemaMethodDeclaration.Create(schemaDefinition));
                }

                public static SchemaClassDeclaration Create(Schema schemaDefinition)
                    => new SchemaClassDeclaration(schemaDefinition);
            }
        }
    }
}
