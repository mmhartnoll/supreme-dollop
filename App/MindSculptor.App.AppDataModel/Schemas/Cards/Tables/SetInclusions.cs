using MindSculptor.DataAccess.Modelled.Records;
using MindSculptor.DataAccess.Modelled.Records.Fields;
using MindSculptor.DataAccess.Modelled.Records.Keys;
using MindSculptor.DataAccess.Modelled.Schemas;

namespace MindSculptor.App.AppDataModel.Schemas.Cards.Tables
{
    public class SetInclusions : RecordDefinition
    {
        public override Schema Schema => MindSculptorDataModel.Cards;


        public static IdField Id = new IdField.Definition
        {
            IsAutoGenerated = true,
            IsReadOnly = true
        };

        public static IdField SetId = new IdField.Definition
        {
            MappedField = Sets.Id,
            IsReadOnly = true
        };

        public static IdField SubsetTypeId = new IdField.Definition
        {
            MappedField = SubsetTypes.Id,
            IsReadOnly = true
        };

        public static IdField BaseId = new IdField.Definition
        {
            MappedField = Bases.Id,
            IsReadOnly = true
        };

        public static IdField RarityTypeId = new IdField.Definition
        {
            MappedField = RarityTypes.Id,
            IsReadOnly = true
        };

        public static IntegerField LogicalOrdinal = new IntegerField.Definition
        {
            MinimumValue = 0,
            MaximumValue = 499,
            IsReadOnly = true
        };

        public static IntegerField CollectorsNumber = new IntegerField.Definition
        {
            MinimumValue = 0,
            MaximumValue = 499,
            IsNullable = true,
            IsReadOnly = true
        };

        public static PrimaryKey PK = new PrimaryKey.Definition
        {
            Fields = Id
        };

        public static UniqueKey UQ1 = new UniqueKey.Definition
        {
            Fields = FieldReference.List(SetId, BaseId, LogicalOrdinal)
        };

        public static UniqueKey UQ2 = new UniqueKey.Definition
        {
            Fields = FieldReference.List(SetId, SubsetTypeId, LogicalOrdinal)
        };

        public static ForeignKey FK1 = new ForeignKey.Definition
        {
            Fields = SetId,
            ReferencedKey = Sets.PK
        };

        public static ForeignKey FK2 = new ForeignKey.Definition
        {
            Fields = SubsetTypeId,
            ReferencedKey = SubsetTypes.PK
        };

        public static ForeignKey FK3 = new ForeignKey.Definition
        {
            Fields = BaseId,
            ReferencedKey = Bases.PK
        };

        public static ForeignKey FK4 = new ForeignKey.Definition
        {
            Fields = RarityTypeId,
            ReferencedKey = RarityTypes.PK
        };
    }
}
